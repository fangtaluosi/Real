name: Release

on:
  schedule:
    - cron: '5 5 * * *'

  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release'
        required: false
        default: nightly

  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
          matrix:
            build: [linux, macos, windows]
            include:
              - build: linux
                os: ubuntu-latest
                rust: nightly
                target: x86_64-unknown-linux-gnu
                archive-name: Real-x86_64-linux-gnu
              - build: macos
                os: macos-12
                rust: nightly
                target: x86_64-apple-darwin
                archive-name: Real-x86_64-apple-darwin
              - build: windows
                os: windows-2022
                rust: nightly-x86_64-msvc
                target: x86_64-pc-windows-msvc
                archive-name: Real-x86_64-windows-msvc
          fail-fast: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true
        target: ${{ matrix.target }}

    - name: Install Lib
      if: matrix.build == 'linux'
      run: sudo apt-get install libgtk-3-dev alsa-base alsa-utils alsa-source libasound2-dev webkit2gtk-4.0 javascriptcoregtk-4.0

    - name: Build binary
      run: cargo build --verbose --release --target ${{ matrix.target }}

    - name: Strip binary (linux and macos)
      if: matrix.build == 'linux' || matrix.build == 'macos'
      run: strip "target/${{ matrix.target }}/release/Real"

    - name: Cope binary (linux and macos)
      if: matrix.build == 'linux' || matrix.build == 'macos'
      run: cp "target/${{ matrix.target }}/release/Real" "./"

    - name: Cope binary (windows)
      if: matrix.build == 'windows'
      shell: powershell
      run: cp "target/${{ matrix.target }}/release/Real.exe" "./"

    - name: Upload archive (linux and macos)
      if: matrix.build == 'linux' || matrix.build == 'macos'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.archive-name }}
        path: |
          assets
          Real
          LICENSE
          Readme.md
          ReadmeEN.md
        retention-days: 1

    - name: Upload archive (windows)
      if: matrix.build == 'windows'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.archive-name }}
        path: |
          assets
          Real.exe
          LICENSE
          Readme.md
          ReadmeEN.md
        retention-days: 1

  publish:
    needs: build
    runs-on: ubuntu-latest

    env:
      GH_REPO: ${{ github.repository }}
      GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}

    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - if: github.event_name == 'workflow_dispatch'
      run: echo "TAG_NAME=${{ github.event.inputs.tag_name }}" >> $GITHUB_ENV
    - if: github.event_name == 'schedule'
      run: echo 'TAG_NAME=nightly' >> $GITHUB_ENV
    - if: github.event_name == 'push'
      run: |
        TAG_NAME=${{ github.ref }}
        echo "TAG_NAME=${TAG_NAME#refs/tags/}" >> $GITHUB_ENV
    - if: env.TAG_NAME == 'nightly'
      run: |
        (echo 'SUBJECT=Real development (Pre-release) build';
        echo 'PRERELEASE=--prerelease') >> $GITHUB_ENV
        gh release delete nightly --yes || true
        git push origin :nightly || true
    - if: env.TAG_NAME != 'nightly'
      run: |
        (echo 'SUBJECT=Real Release build';
        echo 'PRERELEASE=') >> $GITHUB_ENV
        gh release delete stable --yes || true
        git push origin :stable || true

    - name: Prepare download
      run: mkdir pkg

    - name: Download archive
      uses: actions/download-artifact@v3
      with:
        path: pkg/

    - name: Install SHA dependencies
      run: sudo apt-get update && sudo apt-get install -y gettext-base

    - name: Packed Linux
      run: |
        cd pkg
        zip -r Real-x86_64-linux-gnu.zip Real-x86_64-linux-gnu
        sha256sum Real-x86_64-linux-gnu.zip > Real-x86_64-linux-gnu.zip.sha256sum
        echo "SHA_LINUX=$(cat Real-x86_64-linux-gnu.zip.sha256sum)" >> $GITHUB_ENV
    - name: Packed MacOS
      run: |
        cd pkg
        zip -r Real-x86_64-apple-darwin.zip Real-x86_64-apple-darwin
        sha256sum Real-x86_64-apple-darwin.zip > Real-x86_64-apple-darwin.zip.sha256sum
        echo "SHA_MACOS=$(cat Real-x86_64-apple-darwin.zip.sha256sum)" >> $GITHUB_ENV
    - name: Packed Windows
      run: |
        cd pkg
        zip -r Real-x86_64-windows-msvc.zip Real-x86_64-windows-msvc
        sha256sum Real-x86_64-windows-msvc.zip > Real-x86_64-windows-msvc.zip.sha256sum
        echo "SHA_WIN=$(cat Real-x86_64-windows-msvc.zip.sha256sum)" >> $GITHUB_ENV

    - name: Publish release
      env:
        SOLITUDE_VERSION: ${{ env.TAG_NAME }}
        DEBUG: api
      run: |
        envsubst < "$GITHUB_WORKSPACE/.github/workflows/note.md" > "$RUNNER_TEMP/note.md"
        gh release create $TAG_NAME $PRERELEASE --notes-file "$RUNNER_TEMP/note.md" --title "$SUBJECT" --target $GITHUB_SHA pkg/*.zip pkg/*.sha256sum
        if [ "$TAG_NAME" != "nightly" ]; then
          gh release create stable $PRERELEASE --notes-file "$RUNNER_TEMP/note.md" --title "$SUBJECT" --target $GITHUB_SHA pkg/*.zip pkg/*.sha256sum
        fi